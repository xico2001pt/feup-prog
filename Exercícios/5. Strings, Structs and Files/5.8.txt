#include <iostream>
#include <string>
#include <sstream>
#include <vector>
#include <ctime>
using namespace std;

struct EuroMillionsBet {
  vector<unsigned> mainNumbers;
  vector<unsigned> luckyStars;
};

/*                             EXERCICIO 4.6                               */
void bubbleSort(vector<unsigned> &v, char order='a') {
	size_t nElem = v.size();
	bool swapping;
	int temp;
	do {
		swapping = false;
		for (size_t i=0; i<nElem-1; i++)
			if ((v.at(i)>v.at(i+1) && order == 'a') || (v.at(i)<v.at(i+1) && order == 'd')) {
				swapping = true;
				temp = v.at(i);
				v.at(i) = v.at(i+1);
				v.at(i+1) = temp;
			}
		nElem--;
	} while (swapping);
}

void removeDuplicates(vector<unsigned> &v) {
	size_t index = 0, size = v.size();
	int value;
	while (index < size) {
		value = v.at(index);
		for (size_t i=index+1; i<size; i++) {
			if (v.at(i) == value) {
				for (size_t k=i; k<size-1; k++) {
					v.at(k) = v.at(k+1);
				}
				v.resize(--size);
				i--;
			}
		}
		index++;
	}
}

void vectorIntersection(const vector<unsigned> &v1, const vector<unsigned> &v2, vector<unsigned> &v3) {
	for (size_t i=0; i<v1.size(); i++)
		for (size_t j=0; j<v2.size(); j++)
			if (v1.at(i) == v2.at(j))
				v3.push_back(v1.at(i));
	removeDuplicates(v3);
	if (v3.size() > 0) bubbleSort(v3);
}

/*                                                                      */

bool isInVector(unsigned elem, const vector<unsigned> vetor) {
	for (char i = 0; i < vetor.size(); i++)
		if (vetor.at(i) == elem)
			return true;
	return false;
}

unsigned rollDie(unsigned low, unsigned high) {
  return (rand() % (high - low + 1)) + low;
}

EuroMillionsBet keyGen() {
  EuroMillionsBet key;
  int i = 0;
  while (i < 5) {
    unsigned num = rollDie(1, 60);
    if (!isInVector(num, key.mainNumbers)) {
      key.mainNumbers.push_back(num);
      i++;
    }
  }
  bubbleSort(key.mainNumbers);
  i = 0;
  while (i < 2) {
    unsigned num = rollDie(1, 12);
    if (!isInVector(num, key.luckyStars)) {
      key.luckyStars.push_back(num);
      i++;
    }
  }
  bubbleSort(key.luckyStars);
  return key;
}

EuroMillionsBet readBet() {
  stringstream ss;

  EuroMillionsBet bet;
  string str;
  string temp;
  bool mainNum = true;
  unsigned found;
  cout << "Write your bet (N N N N N - S S):" << endl;
  getline(cin, str);
  ss << str;
  while (!ss.eof()) {
    ss >> temp;
    if (stringstream(temp) >> found) {
      if (mainNum) bet.mainNumbers.push_back(found);
      else bet.luckyStars.push_back(found);
    }
    else mainNum = false;
    temp = "";
  }
  return bet;
}

short coincidentValues(const EuroMillionsBet bet, const EuroMillionsBet key) {
  vector<unsigned> intersMain;
  vector<unsigned> intersLucky;
  vectorIntersection(bet.mainNumbers, key.mainNumbers, intersMain);
  vectorIntersection(bet.luckyStars, key.luckyStars, intersLucky);
  return intersMain.size()*10+intersLucky.size();
}

int main() {
  srand(time(NULL));
  EuroMillionsBet key = keyGen();
  EuroMillionsBet bet = readBet();
  short score = coincidentValues(bet, key);
  cout << "Key Numbers: ";
  for(int i=0; i<key.mainNumbers.size();i++)
    cout << key.mainNumbers.at(i) << ' ';
  cout << "- ";
  for(int i=0; i<key.luckyStars.size();i++)
    cout << key.luckyStars.at(i) << ' ';
  cout << "\nYou got " << score/10 << " main numbers and " << score%10 << " lucky stars.\n";
}