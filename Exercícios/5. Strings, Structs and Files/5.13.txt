#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
using namespace std;

struct EuroMillionsBet {
  vector<unsigned> mainNumbers;
  vector<unsigned> luckyStars;
};

/*                             EXERCICIO 4.6                               */
void bubbleSort(vector<unsigned> &v, char order='a') {
	size_t nElem = v.size();
	bool swapping;
	int temp;
	do {
		swapping = false;
		for (size_t i=0; i<nElem-1; i++)
			if ((v.at(i)>v.at(i+1) && order == 'a') || (v.at(i)<v.at(i+1) && order == 'd')) {
				swapping = true;
				temp = v.at(i);
				v.at(i) = v.at(i+1);
				v.at(i+1) = temp;
			}
		nElem--;
	} while (swapping);
}

void removeDuplicates(vector<unsigned> &v) {
	size_t index = 0, size = v.size();
	int value;
	while (index < size) {
		value = v.at(index);
		for (size_t i=index+1; i<size; i++) {
			if (v.at(i) == value) {
				for (size_t k=i; k<size-1; k++) {
					v.at(k) = v.at(k+1);
				}
				v.resize(--size);
				i--;
			}
		}
		index++;
	}
}

void vectorIntersection(const vector<unsigned> &v1, const vector<unsigned> &v2, vector<unsigned> &v3) {
	for (size_t i=0; i<v1.size(); i++)
		for (size_t j=0; j<v2.size(); j++)
			if (v1.at(i) == v2.at(j))
				v3.push_back(v1.at(i));
	removeDuplicates(v3);
	if (v3.size() > 0) bubbleSort(v3);
}

/*                                                                      */

EuroMillionsBet readBet(string str) {
    stringstream ss;
    EuroMillionsBet bet;
    string temp;
    bool mainNum = true;
    unsigned found;
    ss << str;
    while (!ss.eof()) {
        ss >> temp;
        if (stringstream(temp) >> found) {
        if (mainNum) bet.mainNumbers.push_back(found);
        else bet.luckyStars.push_back(found);
        }
        else mainNum = false;
        temp = "";
    }
    return bet;
}

short coincidentValues(const EuroMillionsBet bet, const EuroMillionsBet key) {
    vector<unsigned> intersMain;
    vector<unsigned> intersLucky;
    vectorIntersection(bet.mainNumbers, key.mainNumbers, intersMain);
    vectorIntersection(bet.luckyStars, key.luckyStars, intersLucky);
    return intersMain.size()*10+intersLucky.size();
}

int main() {
    string line;
    EuroMillionsBet bet;
    short score;
    // Open files
    ifstream f_in("bets.txt");
    ofstream f_out("bets_result.txt");
    // Input key
    cout << "Write the key (N N N N N - S S):" << endl;
    getline(cin, line);
    EuroMillionsBet key = readBet(line);
    f_out << "KEY =  " << line << endl;
    // Check bets and write scores
    while (getline(f_in, line)) {
        f_out << line;
        if (isdigit(line.at(0))) {
            bet = readBet(line);
            score = coincidentValues(bet, key);
            f_out << " =>  " << bet.mainNumbers.size() << "- ";
            f_out << bet.luckyStars.size() << " |  " << score/10 << "- " << score%10;
        }
        f_out << endl;
    }
    return 0;
}